using System.Text;

namespace KontrolWork1.Menu;

/// <summary>
/// –û–±—ä–µ–∫—Ç –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
/// </summary>
public class MenuButtons
{
    private protected string _title = "–≠—Ç–æ –º–µ–Ω—é";
    private readonly IButton[] _buttons;
    private protected int _length = 0;
    private protected int _highlightedButton = 0;
    private protected List<int> _selectedButtons = new List<int> { -1, -1, -1, -1, -1, -1, -1, -1, -1};


    /// <summary>
    /// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ú–µ–Ω—é - –æ—Ç 1 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤
    /// </summary>
    public string Title
    {
        get => _title;
        set
        {
            if (value == null || value.Length == 0 || value.Length > 100)
            {
                throw new ArgumentException("–ù–∞–∑–≤–∞–Ω–∏—è –ª–∏–±–æ –Ω–µ—Ç, –ª–∏–±–æ –æ–Ω–æ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤");
            }
            else
            {
                _title = value;
            }
        }
    }

    /// <summary>
    /// –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –º–µ–Ω—é
    /// </summary>
    public IButton[] Buttons => _buttons;

    /// <summary>
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é
    /// </summary>
    public int Length => _length;

    /// <summary>
    /// –ú–µ–Ω—é –∏–∑ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ ToggleButton —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    /// </summary>
    public MenuButtons()
    {
        _buttons = new IButton[] { new ToggleButton() };
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—ë–º –ú–µ–Ω—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º <paramref name="title"/> –∏ –∫–Ω–æ–ø–∫–∞–º–∏ <paramref name="buttons"/>.
    /// –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞!
    /// </summary>
    /// <param name="title"></param>
    /// <param name="buttons"></param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="ArgumentException"></exception>
    public MenuButtons(string title, IButton[] buttons)
    {
        Title = title;
        if (buttons == null || buttons.Length == 0)
        {
            throw new ArgumentNullException("–í –º–µ–Ω—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–Ω–æ–ø–∫–∏");
        }
        else if (!buttons.All(button => button.GetType() == buttons[0].GetType()))
        {
            throw new ArgumentException("–ö–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞");
        }
        _buttons = buttons;
        _length = buttons.Length;
    }

    /// <summary>
    /// –í—ã–≤–æ–¥–∏–º –ú–µ–Ω—é –≤ –∫–æ–Ω—Å–æ–ª—å
    /// </summary>
    public virtual void PrintMenu()
    {
        Console.OutputEncoding = Encoding.Unicode;

        // –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        Console.Clear();
        Console.WriteLine("\x1b[3J");

        int maxLength = Title.Length;
        for (int i = 0; i < Length; i++)
        {
            // –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–∫–∏: "üîò  –≠—Ç–æ –∫–Ω–æ–ø–∫–∞"
            maxLength = Math.Max(maxLength, Buttons[i].ToString().Length + 3);
        }

        int amountOfStrings = 4 + Length;

        // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ä—Å–æ—Ä–∞
        int centerX = (Console.WindowWidth / 2) - (maxLength / 2) - 6;
        int centerY = (Console.WindowHeight - amountOfStrings) / 2;
        if (centerX < 0 || centerY < 0)
        {
            Console.WriteLine("\x1b[46m–£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ç–µ–º —Ç—ã–∫–Ω–∏—Ç–µ –Ω–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å\x1b[0m");
            Console.ReadKey();
            return;
        }
        Console.SetCursorPosition(centerX, centerY++);

        // –≤—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        Console.Write($"‚ïî{new string('‚ïê', maxLength + 10)}‚ïó");
        Console.SetCursorPosition(centerX, centerY++);
        Console.Write($"‚ïë{Title.PadLeft((maxLength + Title.Length + 10) / 2).PadRight(maxLength + 10)}‚ïë");
        Console.SetCursorPosition(centerX, centerY++);
        Console.Write($"‚ï†{new string('‚ïê', maxLength + 10)}‚ï£");
        Console.SetCursorPosition(centerX, centerY++);

        // –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏
        for (int i = 0; i < Length; i++)
        {
            if (i == _highlightedButton)
            {
                Console.Write($"‚ïë {Buttons[i].SelectedIcon}  ");
                Console.ForegroundColor = ConvertToConsoleColor(Buttons[i].HighlightColor);
                Console.Write(Buttons[i].Text);
                Console.ResetColor();
                Console.Write($"{(new string(' ', maxLength + 10 - Buttons[i].ToString().Length - 1))}‚ïë"); 
            }
            else
            {
                Console.Write($"‚ïë {Buttons[i]}{new string(' ', maxLength + 10 - Buttons[i].ToString().Length - 1)}‚ïë");
            }
            Console.SetCursorPosition(centerX, centerY++);
        }
        Console.Write($"‚ïö{new string('‚ïê', maxLength + 10)}‚ïù");
        Console.SetCursorPosition(0, 0);
    }

    /// <summary>
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ <paramref name="colorString"/> –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ ConsoleColor
    /// </summary>
    /// <param name="colorString"></param>
    /// <returns></returns>
    public static ConsoleColor ConvertToConsoleColor(string colorString)
    {
        switch (colorString.ToLower())
        {
            case "black":
                return ConsoleColor.Black;
            case "blue":
                return ConsoleColor.Blue;
            case "cyan":
                return ConsoleColor.Cyan;
            case "darkblue":
                return ConsoleColor.DarkBlue;
            case "darkcyan":
                return ConsoleColor.DarkCyan;
            case "darkgray":
                return ConsoleColor.DarkGray;
            case "darkgreen":
                return ConsoleColor.DarkGreen;
            case "darkmagenta":
                return ConsoleColor.DarkMagenta;
            case "darkred":
                return ConsoleColor.DarkRed;
            case "darkyellow":
                return ConsoleColor.DarkYellow;
            case "gray":
                return ConsoleColor.Gray;
            case "green":
                return ConsoleColor.Green;
            case "magenta":
                return ConsoleColor.Magenta;
            case "red":
                return ConsoleColor.Red;
            case "white":
                return ConsoleColor.White;
            case "yellow":
                return ConsoleColor.Yellow;
            default:
                return ConsoleColor.White; 
        }
    }

    /// <summary>
    /// –î–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é
    /// </summary>
    /// <returns>–ò–Ω–¥–µ–∫—Å –æ–ø—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏–ª–∏ -1, –µ—Å–ª–∏ –æ–Ω –µ—ë –Ω–µ –≤—ã–±—Ä–∞–ª</returns>
    public virtual int MoveCursor()
    {
        ConsoleKeyInfo keyInfo = Console.ReadKey(true);
        switch (keyInfo.Key)
        {
            case ConsoleKey.UpArrow:
                _highlightedButton = (Length + _highlightedButton - 1) % Length;
                return -1;

            case ConsoleKey.DownArrow:
                _highlightedButton = (_highlightedButton + 1) % Length;
                return -1;

            case ConsoleKey.Enter:

                foreach (var button in _selectedButtons)
                {
                    if (button != -1) return _highlightedButton;
                }
                Console.WriteLine("\x1b[46m–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å\x1b[0m");
                Console.ReadKey();
                return -1;

            default:
                int typeOfClick = Buttons[_highlightedButton].ClickButton(keyInfo, true, -1);

                for (int i = 0; i < 9; i++)
                {
                    if (_selectedButtons[i] == _highlightedButton || _selectedButtons[i] == -1)
                        continue;
                    int change = Buttons[_selectedButtons[i]].ClickButton(keyInfo, false, typeOfClick);
                    AddRemoveButtonFromList(i, change);
                }
                AddRemoveButtonFromList(_highlightedButton, typeOfClick);
                return -1;
        }
    }

    private protected virtual void AddRemoveButtonFromList(int number, int operation)
    {
        if (operation == -2)
        {
            for (int i = 0; i < 9; i++)
            {
                if (_selectedButtons[i] == -1) { _selectedButtons[i] = number; }
            }
        }
        if (operation == 0)
        {
            for (int i = 0; i < 9; i++)
            {
                if (_selectedButtons[i] == number) { _selectedButtons[i] = -1; }
            }
        }

        else if (operation >= 1)
        {
            _selectedButtons[operation - 1] = number;
        }
    }

    /// <summary>
    /// –í—ã–≤–æ–¥–∏–º –ú–µ–Ω—é –Ω–∞ —ç–∫—Ä–∞–Ω, –ø–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –∏–Ω–¥–µ–∫—Å
    /// </summary>
    /// <returns></returns>
    public virtual int ShowMenuAndGetOption(out int option)
    {
        option = -1;
        while (option == -1)
        {
            PrintMenu();
            option = MoveCursor();
        }
        Console.Clear();
        return option;
    }
}