namespace KontrolWork1.Menu;

/// <summary>
/// "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è" –∫–Ω–æ–ø–∫–∞ - –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞
/// </summary>
public class ToggleButton : IButton
{
    private protected readonly string _iconOff = "üîò";
    private protected readonly string[] _iconOn = { "üîµ" };
    private protected string _text = "–≠—Ç–æ –∫–Ω–æ–ø–∫–∞";
    private protected readonly string[] _colors = { "green", "yellow", "blue", "red", "purple" };
    private protected string _highlightColor = "blue";
    private protected string _selectedIcon = "üîò";
    private protected bool _isSelected = false;

    /// <summary>
    /// –ò–∫–æ–Ω–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞
    /// </summary>
    public string IconOff => _iconOff;

    /// <summary>
    /// –ò–∫–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
    /// </summary>
    public string[] IconOn => _iconOn;

    /// <summary>
    /// –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    /// </summary>
    public string Text
    {
        get => _text;
        set
        {
            if (value == null || value.Length == 0 || value.Length > 100)
            {
                throw new ArgumentException("–¢–µ–∫—Å—Ç–∞ –ª–∏–±–æ –Ω–µ—Ç, –ª–∏–±–æ –æ–Ω –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤");
            }
            else
            {
                _text = value;
            }
        }
    }

    /// <summary>
    /// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    /// </summary>
    public string[] Colors => _colors;

    /// <summary>
    /// –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –Ω–µ—ë
    /// </summary>
    public string HighlightColor
    {
        get => _highlightColor;
        set
        {
            if (value == null || value.Length == 0 || !_colors.Contains(value))
            {
                throw new ArgumentException("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ü–≤–µ—Ç");
            }
            else
            {
                _highlightColor = value;
            }
        }
    }

    /// <summary>
    /// –¢–µ–∫—É—â–∞—è –∏–∫–æ–Ω–∫–∞
    /// </summary>
    public string SelectedIcon => _selectedIcon;

    /// <summary>
    /// –ù–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
    /// </summary>
    public bool IsSelected => _isSelected;

    /// <summary>
    /// –°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É —Å –Ω–∞–¥–ø–∏—Å—å—é <paramref name="text"/> –∏ <paramref name="highlightColor"/> –ø–æ–¥—Å—Ç–≤–µ—Ç–∫–æ–π 
    /// </summary>
    /// <param name="text"></param>
    /// <param name="highlightColor"></param>
    public ToggleButton(string text = "–≠—Ç–æ –∫–Ω–æ–ø–∫–∞", string highlightColor = "blue")
    {
        Text = text;
        HighlightColor = highlightColor;
    }

    /// <summary>
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    /// </summary>
    /// <returns></returns>
    public override string ToString()
    {
        return $"{SelectedIcon}  {Text}";
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
    /// </summary>
    /// <param name="key"></param>
    /// <param name="isYouClick"></param>
    /// <param name="order"></param>
    /// <param name="typeOfClick"></param>
    /// <returns>
    /// <p>
    /// -1 => –∫–Ω–æ–ø–∫—É –Ω–µ –≤–∫–ª—é—á–∞–ª–∏ –∏ –Ω–µ –≤—ã–∫–ª—é—á–∞–ª–∏
    /// </p><p>
    /// 0 => –∫–Ω–æ–ø–∫—É –≤—ã–∫–ª—é—á–∏–ª–∏
    /// </p><p>
    /// 1 => –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–∏–ª–∏
    /// </p>
    /// </returns>
    public virtual int ClickButton(ConsoleKeyInfo key, bool isYouClick, int typeOfClick)
    {
        if (key.Key == ConsoleKey.Spacebar)
        {
            if (isYouClick)
            {
                _isSelected = !_isSelected;
                _selectedIcon = (_isSelected ? _iconOn[0] : _iconOff);
                typeOfClick = (_isSelected ? 1 : 0);
                return typeOfClick;
            }
            else if (_isSelected && (typeOfClick == 1))
            {
                _isSelected = false;
                _selectedIcon = _iconOff;
                return 0;
            }
            else return -1;
        }
        return -1;
    }
}